{
  "editor.suggest.insertMode": "insert",
  "[c]": {
    "editor.suggest.insertMode": "insert",
  },
  "[cpp]": {
    "editor.suggest.insertMode": "insert",
  },
  "[css]": {
    "editor.suggest.insertMode": "insert"
  },
  "terminal.integrated.fontFamily": "Iosevka Nerd Font",
  "javascript.updateImportsOnFileMove.enabled": "always",
  "launch": {},
  "[json]": {},
  "editor.codeLens": true,
  "git.openRepositoryInParentFolders": "always",
  "update.showReleaseNotes": false,
  "editor.cursorSurroundingLines": 5,
  "editor.fontFamily": "Iosevka Nerd Font",
  "editor.padding.top": 10, // only needed for Iosevka font maybe there is a better solution without modifying the line height
  "terminal.integrated.fontSize": 16,
  "editor.fontSize": 26,
  "editor.fontWeight": "400",
  "editor.fontLigatures": true,
  "editor.formatOnSave": true,
  "editor.lineHeight": 1,
  "editor.inlineSuggest.enabled": true,
  "editor.lineNumbers": "relative",
  "editor.linkedEditing": true,
  "editor.smoothScrolling": false,
  "editor.stickyScroll.enabled": true,
  "editor.suggestFontSize": 14,
  "editor.wordWrap": "off",
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "editor.minimap.enabled": false,
  "workbench.settings.editor": "json",
  "editor.cursorSmoothCaretAnimation": "off",
  "zenMode.hideLineNumbers": false,
  "zenMode.fullScreen": true,
  "zenMode.centerLayout": false,
  "zenMode.hideStatusBar": false,
  "csharp.semanticHighlighting.enabled": true,
  "vim.leader": "<Space>",
  "vim.hlsearch": true,
  "vim.useSystemClipboard": true,
  "vim.camelCaseMotion.enable": false,
  "vim.ignorecase": true,
  "vim.handleKeys": {
    "": false
  },
  "toggleboolean.mapping": {
    "true": false,
    "false": true,
    "yes": "o",
    "no": "yes",
    "on": "off",
    "off": "on",
    "1": "0",
    "0": "1"
  },
  "files.exclude": {
    "**/.git": false,
    "**/.svn": false,
    "**/.hg": false,
    "**/CVS": false,
    "**/.DS_Store": false,
    "**/Thumbs.db": false,
    ".vscode": false,
    "**/*.csproj": false,
    "**/*.sln": false,
    "**/Packages/": false
  },
  "vim.normalModeKeyBindingsNonRecursive": [
    { //delete to _ register 
      "before": [
        "leader",
        "w"
      ],
      "after": [
        "\"",
        "_",
        "d",
        "w"
      ]
    },
    { //delete to _ register 
      "before": [
        "leader",
        "c"
      ],
      "after": [
        "\"",
        "_",
        "c",
        "w",
      ]
    },
    {
      "before": [
        "leader",
        "p"
      ],
      "commands": [
        "editor.action.showDefinitionPreviewHover"
      ]
    },
    {
      "before": [
        "J"
      ],
      "commands": [
        "editor.action.moveLinesDownAction"
      ]
    }, // moveLineDown
    {
      "before": [
        "K"
      ],
      "commands": [
        "editor.action.moveLinesUpAction"
      ]
    },
    {
      "before": [
        "<C-w>",
      ],
      "commands": [
        ":s/[A-Z]",
      ]
    },
    {
      "before": [
        "leader",
        "v"
      ],
      "commands": [
        ":vsplit"
      ]
    },
    {
      "before": [
        "leader",
        "q"
      ],
      "commands": [
        "workbench.action.closeEditorsInGroup"
      ]
    },
    //Reveals current file in explorer
    {
      "before": [
        "leader",
        "e"
      ],
      "commands": [
        "revealFileInOS"
      ]
    },
    {
      "before": [
        "leader",
        "s"
      ],
      "commands": [
        ":split"
      ]
    },
    {
      "before": [
        "leader",
        "b"
      ],
      "commands": [
        "workbench.action.navigateBack"
      ]
    },
    {
      "before": [
        "leader",
        "n"
      ],
      "commands": [
        "workbench.action.navigateForward"
      ]
    },
    {
      "before": [
        "leader",
        "g"
      ],
      "commands": [
        "editor.action.goToDeclaration"
      ]
    },
    {
      "before": [
        "leader",
        "r"
      ],
      "commands": [
        "editor.action.goToReferences"
      ]
    },
    {
      "before": [
        "leader",
        "i"
      ],
      "commands": [
        "editor.action.goToImplementation"
      ]
    },
    {
      "before": [
        "leader",
        "u"
      ],
      "commands": [
        "editor.action.quickFix"
      ]
    },
    // panes
    {
      "before": [
        "leader",
        "h"
      ],
      "commands": [
        "workbench.action.focusLeftGroup"
      ]
    },
    {
      "before": [
        "leader",
        "j"
      ],
      "commands": [
        "workbench.action.focusBelowGroup"
      ]
    },
    {
      "before": [
        "leader",
        "k"
      ],
      "commands": [
        "workbench.action.focusAboveGroup"
      ]
    },
    {
      "before": [
        "leader",
        "l"
      ],
      "commands": [
        "workbench.action.focusRightGroup"
      ]
    },
    // {
    //   "before": [
    //     "[",
    //     "h"
    //   ],
    //   "commands": [
    //     "editor.action.marker.prev"
    //   ]
    // },
    // {
    //   "before": [
    //     "]",
    //     "l"
    //   ],
    //   "commands": [
    //     "editor.action.marker.next"
    //   ]
    // },
    {
      "before": [
        "leader",
        "f"
      ],
      "commands": [
        "workbench.action.quickOpen"
      ]
    },
    {
      "before": [
        "<S-l>",
      ],
      "after": [
        "i",
        " ",
        "<ESC>",
        "l"
      ]
    },
    {
      "before": [
        "<S-h>",
      ],
      "after": [
        "h",
        "v",
        "x",
        "<ESC>",
      ]
    },
    {
      "before": [
        "<C-d>",
      ],
      "after": [
        "<C-d>",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "<C-u>",
      ],
      "after": [
        "<C-u>",
        "z",
        "z"
      ]
    },
    {
      "before": [
        "leader",
        "d"
      ],
      "after": [
        "\"",
        "_",
        "d",
        "d"
      ]
    },
    { //delete to _ register 
      "before": [
        "leader",
        "x"
      ],
      "after": [
        "\"",
        "_",
        "x"
      ]
    },
  ],
  "vim.insertModeKeyBindings": [ //insert mode paste 
    {
      "before": [
        "<C-p>"
      ],
      "after": [
        "<ESC>",
        "p",
        "b",
      ]
    }
  ],
  "vim.visualModeKeyBindings": [
    { //select the text without new line character 
      "before": [
        "$"
      ],
      "after": [
        "g",
        "_",
      ]
    },
    { //delete to _ register 
      "before": [
        "leader",
        "d"
      ],
      "after": [
        "\"",
        "_",
        "d"
      ]
    },
    { //paste the selection but not copy the selection
      "before": [
        "leader",
        "p"
      ],
      "after": [
        "\"",
        "_",
        "d",
        "P"
      ]
    },
    {
      "before": [
        "g",
        "s"
      ],
      "commands": [
        "editor.action.moveSelectionToNextFindMatch"
      ]
    },
    {
      "before": [
        "<"
      ],
      "commands": [
        "editor.action.outdentLines"
      ]
    },
    {
      "before": [
        ">"
      ],
      "commands": [
        "editor.action.indentLines"
      ]
    },
    // Move selected lines while staying in visual mode
    {
      "before": [
        "J"
      ],
      "commands": [
        "editor.action.moveLinesDownAction"
      ]
    },
    {
      "before": [
        "K"
      ],
      "commands": [
        "editor.action.moveLinesUpAction"
      ]
    },
    // toggle comment selection
    {
      "before": [
        "leader",
        "c"
      ],
      "commands": [
        "editor.action.commentLine"
      ]
    }
  ],
  "editor.acceptSuggestionOnCommitCharacter": false,
  "terminal.integrated.env.windows": {},
  "workbench.editor.editorActionsLocation": "hidden",
  "workbench.editor.empty.hint": "hidden",
  "apc.font.family": "Iosevka Nerd Font",
  "window.menuBarVisibility": "hidden",
  "breadcrumbs.enabled": false,
  "window.commandCenter": false,
  "workbench.layoutControl.enabled": false,
  "window.titleBarStyle": "native",
  "security.workspace.trust.untrustedFiles": "open",
  "workbench.colorCustomizations": {
    "[Tsoding Emacs Gruber Even Darker]": {
      "editorBracketHighlight.foreground1": "#fefff4",
      "editorBracketHighlight.foreground2": "#fefff4",
      "editorBracketHighlight.foreground3": "#fefff4",
      "editorBracketHighlight.foreground4": "#fefff4",
    },
    "[Tsoding Emacs Gruber Minimal]": {
      "editorBracketHighlight.foreground1": "#fefff4",
      "editorBracketHighlight.foreground2": "#fefff4",
      "editorBracketHighlight.foreground3": "#fefff4",
      "editorBracketHighlight.foreground4": "#fefff4",
    }
  },
  "editor.tokenColorCustomizations": {
    "types": "#95a99f",
    "functions": "#96a6c8",
    "textMateRules": [
      {
        "scope": "entity.name.type.class",
        "settings": {
          "foreground": "#95a99f"
        }
      },
    ]
  },
  "workbench.activityBar.location": "default",
  "workbench.sideBar.location": "right",
  "terminal.integrated.defaultProfile.windows": "Command Prompt",
  "workbench.startupEditor": "none",
  "git.enableSmartCommit": true,
  "workbench.colorTheme": "Default High Contrast",
  "github.copilot.enable": {
    "*": false,
    "plaintext": false,
    "markdown": false,
    "scminput": false
  }
}